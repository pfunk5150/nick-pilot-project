# scripts/init-enhanced-session.ps1
# Enhanced session initialization with workflow type support (PowerShell)

param(
    [Parameter(Mandatory = $true)]
    [string]$WorkflowType,

    [Parameter(Mandatory = $true)]
    [string]$Topic
)

$Date = Get-Date -Format 'yyyy-MM-dd'

switch ($WorkflowType) {
    'session' {
        $BranchName = "feature/session-$Date-$Topic"
        $ContextTemplate = 'session_continuation'
        Write-Host 'üéØ Creating AI session workflow for structured engagement' -ForegroundColor Green
    }
    'experimental' {
        $BranchName = "experimental/$Topic"
        $ContextTemplate = 'experimental_exploration'
        Write-Host 'üß™ Creating experimental workflow for isolated exploration' -ForegroundColor Yellow
    }
    'enhancement' {
        $BranchName = "enhancement/$Topic"
        $ContextTemplate = 'apm_enhancement'
        Write-Host 'üöÄ Creating enhancement workflow for APM framework improvements' -ForegroundColor Blue
    }
    'template' {
        $BranchName = "template/$Topic"
        $ContextTemplate = 'template_development'
        Write-Host 'üìö Creating template workflow for AI consulting pattern development' -ForegroundColor Magenta
    }
    'client' {
        $BranchName = "client/$Topic"
        $ContextTemplate = 'client_customization'
        Write-Host 'üéØ Creating client workflow for engagement-specific customizations' -ForegroundColor Cyan
    }
    default {
        Write-Host '‚ùå Error: Workflow type must be: session, experimental, enhancement, template, or client' -ForegroundColor Red
        Write-Host 'Usage: .\scripts\init-enhanced-session.ps1 <workflow_type> <topic>'
        exit 1
    }
}

Write-Host "üöÄ Creating $WorkflowType workflow: $BranchName" -ForegroundColor Green

# Create branch from master
try {
    git checkout master
    git pull origin master 2>$null
    if ($LASTEXITCODE -ne 0) {
        Write-Host '‚ÑπÔ∏è No remote updates available' -ForegroundColor Yellow
    }
    git checkout -b $BranchName

    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Failed to create branch: $BranchName" -ForegroundColor Red
        exit 1
    }
}
catch {
    Write-Host "‚ùå Git operations failed: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

# Create context initialization file
$ContextContent = @"
# $($WorkflowType.Substring(0,1).ToUpper() + $WorkflowType.Substring(1)) Workflow Context

**Branch:** $BranchName
**Created:** $(Get-Date)
**Template:** $ContextTemplate
**Topic:** $Topic

## Workflow Objectives
- [ ] Initialize $WorkflowType environment
- [ ] Set up context bridging for Claude session
- [ ] Establish success criteria
- [ ] Document progress and outcomes

## Context Bridge Status
- [ ] Export repository context loaded
- [ ] Workflow-specific templates applied
- [ ] Session initialization complete

## Next Steps
1. Start Claude session with workflow-specific context
2. Execute planned workflow activities
3. Document outcomes and artifacts
4. Prepare for merge validation

---
*Generated by init-enhanced-session.ps1*
"@

$ContextFile = "workflow_context_$WorkflowType.md"
$ContextContent | Out-File -FilePath $ContextFile -Encoding UTF8

Write-Host "‚úÖ $WorkflowType workflow ready: $BranchName" -ForegroundColor Green
Write-Host "üìã Context file created: $ContextFile" -ForegroundColor Cyan
Write-Host 'üéØ Next: Start Claude session with workflow-specific context' -ForegroundColor Yellow
Write-Host ''
Write-Host 'üîß Available commands:' -ForegroundColor White
Write-Host '  .\scripts\validate-merge-candidate.ps1  # Pre-merge validation' -ForegroundColor Gray
Write-Host '  .\scripts\bridge-context.ps1           # Enhanced context bridging' -ForegroundColor Gray
Write-Host "  git add . && git commit -m 'Initial $WorkflowType setup'" -ForegroundColor Gray
